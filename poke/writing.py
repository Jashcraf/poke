import numpy as np
from astropy.io import fits

def JonesToFITS(data,filename,realimag=True):
    """Write a N x N x 2 x 2 x 2 Jones Pupil to a FITS file

    Parameters
    ----------
    data : numpy.ndarray complex128
        Jones pupil data generated by poke. Generally the first two dimensions are square, and correspond to the
        exit pupil coordinate. The remainder are matrix row, column, and then real/imag
    filename : str
        name of file to save the jones pupil as
    realimag : bool
        whether to save in real/imaginary parts. Defaults to True. If False, saves as absolute value and phase.
    """

    if realimag:
        realpart = np.real(data)
        imagpart = np.imag(data)
    else:
        realpart = np.abs(data)
        imagpart = np.angle(data)

    box = np.empty([data.shape[0],data.shape[1],2,2,2])
    box[...,0] = realpart
    box[...,1] = imagpart

    hdu = fits.PrimaryHDU(box)
    hdul = fits.HDUList([hdu])

    hdul['wavelength'] = 1.6
    hdul['pixelscale'] = 1

    pass
    



def WriteMatrixToFITS(matrix,filename):

    # Assumes an N x N x Npts matrix that you want to interpolate and write onto a grid. Npts should have an integer root

    # grab matrix dimension
    dim = matrix.shape[0]

    # Total number of points
    Npts = matrix.shape[-1]
    
    # number of points on one side of the square
    npts = int(np.sqrt(Npts))

    # simplifying dimensions would be better - c'est la vie
    ims = np.empty([npts,npts,dim,dim,2],dtype='float64')

    for i in range(matrix.shape[0]):
        for j in range(matrix.shape[1]):

            scattered_matrix = matrix[i,j,:]
            reshaped_matrix = np.reshape(scattered_matrix,[npts,npts])

            real_part = np.real(reshaped_matrix)
            imag_part = np.imag(reshaped_matrix)

            ims[:,:,i,j,0] = real_part
            ims[:,:,i,j,1] = imag_part

    # Now write to fits file
    hdu = fits.PrimaryHDU(ims)
    hdul = fits.HDUList([hdu])
    hdul.writeto(filename,overwrite=True)